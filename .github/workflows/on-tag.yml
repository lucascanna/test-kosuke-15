name: Build and Publish on Tag

on:
  push:
    tags:
      - 'v*.*.*'

jobs:
  update-version-files:
    name: Update Version Files
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Extract version from tag
        id: get_version
        run: |
          VERSION=${GITHUB_REF#refs/tags/}
          VERSION_NUMBER=${VERSION#v}
          echo "VERSION=${VERSION}" >> $GITHUB_ENV
          echo "VERSION_NUMBER=${VERSION_NUMBER}" >> $GITHUB_ENV
          echo "version=${VERSION}" >> $GITHUB_OUTPUT

      - name: Setup Node.js
        uses: actions/setup-node@v6
        with:
          node-version: '20'

      - name: Update package.json
        run: |
          npm version ${{ env.VERSION_NUMBER }} --no-git-tag-version --allow-same-version

      - name: Update engine/pyproject.toml
        run: |
          sed -i "3s/version = \".*\"/version = \"${{ env.VERSION_NUMBER }}\"/" engine/pyproject.toml

      - name: Update .version file
        run: |
          echo "${{ env.VERSION }}" > .version

      - name: Commit and push version updates
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add package.json engine/pyproject.toml .version
          git diff --quiet && git diff --staged --quiet || (git commit -m "chore: update version to ${{ env.VERSION }}" && git push origin HEAD:main)

  build-and-release:
    name: Build Docker Image and Create Release
    needs: update-version-files
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v5
        with:
          ref: main

      - name: Pull latest changes
        run: git pull origin main

      - name: Extract version from tag
        id: get_version
        run: |
          VERSION=${GITHUB_REF#refs/tags/}
          echo "VERSION=${VERSION}" >> $GITHUB_ENV

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          platforms: linux/amd64,linux/arm64
          tags: ghcr.io/${{ github.repository_owner }}/kosuke-template:${{ env.VERSION }},ghcr.io/${{ github.repository_owner }}/kosuke-template:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ env.VERSION }}
          name: Release ${{ env.VERSION }}
          generate_release_notes: true
          token: ${{ secrets.GITHUB_TOKEN }}
          body: |
            ## What's Changed

            This release includes changes automatically categorized from merged pull requests.

            **Full Changelog**: https://github.com/${{ github.repository }}/compare/${{ github.event.before }}...${{ env.VERSION }}

            ### PR Label Categories:
            - üöÄ **feature**: New features and enhancements
            - üêõ **bug**: Bug fixes and patches
            - üìö **documentation**: Documentation updates
            - üîß **enhancement**: Improvements to existing features
            - ‚ö° **performance**: Performance improvements
            - üîí **security**: Security fixes
            - üí• **breaking**: Breaking changes (requires migration)
            - üßπ **chore**: Maintenance and internal changes

            ---

            ${{ github.event.release.body }}

      - name: Setup Node.js for Docusaurus
        uses: actions/setup-node@v6
        with:
          node-version: '20'

      - name: Install Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest

      - name: Create Docusaurus Version (major/minor only)
        if: ${{ !contains(env.VERSION, 'rc') && !contains(env.VERSION, 'beta') && !contains(env.VERSION, 'alpha') }}
        run: |
          cd docs
          pnpm install --frozen-lockfile
          VERSION_NUMBER=${VERSION#v}
          pnpm run docusaurus docs:version $VERSION_NUMBER

          if [ -d "versioned_docs/version-$VERSION_NUMBER" ]; then
            # Update lastVersion in docusaurus.config.ts to the new version
            sed -i "s/lastVersion: '[^']*'/lastVersion: '$VERSION_NUMBER'/" docusaurus.config.ts
            
            git config --local user.email "action@github.com"
            git config --local user.name "GitHub Action"
            git add versioned_docs/ versioned_sidebars/ versions.json docusaurus.config.ts
            git commit -m "docs: add version $VERSION_NUMBER snapshot"
            git push origin HEAD:main
          fi

  deploy-to-vercel-production:
    name: Deploy to Vercel Production
    needs: build-and-release
    runs-on: ubuntu-latest
    environment: production
    env:
      VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
      VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v5
        with:
          ref: main

      - name: Install Vercel CLI
        run: npm install --global vercel@latest

      - name: Deploy to Production
        run: vercel deploy --prod --token=${{ secrets.VERCEL_TOKEN }}
