[project]
name = "engine-service"
version = "1.5.0"
description = "Core engine service for Kosuke Template"
authors = [{name = "Kosuke Team"}]
requires-python = ">=3.12"
dependencies = [
    "fastapi==0.115.12",
    "uvicorn==0.34.0",
    "pydantic==2.10.6",
    "python-dotenv==1.0.1",
    "sentry-sdk[fastapi]==2.19.2",
]

[project.optional-dependencies]
dev = [
    "pytest==8.3.4",
    "pytest-asyncio==0.25.2",
    "pytest-cov==6.0.0",
    "httpx==0.28.1",
    "mypy==1.14.1",
    "ruff==0.9.1",
]

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.build.targets.wheel]
packages = ["."]
only-include = ["main.py", "models.py", "src"]

# ==== pytest ====
[tool.pytest.ini_options]
minversion = "6.0"
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "-v",
    "--tb=short",
    "--disable-warnings",
    "--color=yes",
    "--cov=.",
    "--cov-report=term-missing"
]
asyncio_mode = "auto"

# ==== Coverage ====
[tool.coverage.run]
source = ["."]
omit = [
    "*/tests/*",
    "*/venv/*",
    "*/.venv/*",
    "*/env/*",
    "*/__pycache__/*",
    "venv/*",
    ".venv/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if __name__ == .__main__.:",
    "raise AssertionError",
    "raise NotImplementedError",
]

# ==== mypy ====
[tool.mypy]
python_version = "3.12"
check_untyped_defs = true
ignore_missing_imports = true
warn_unused_ignores = true
warn_redundant_casts = true
warn_unused_configs = true
warn_return_any = true
warn_unreachable = true
strict_optional = true
disallow_untyped_calls = false
disallow_untyped_defs = true
disallow_incomplete_defs = true
namespace_packages = false
explicit_package_bases = false

# ==== ruff ====
[tool.ruff]
line-length = 100
target-version = "py312"
exclude = [
    ".venv",
    "venv",
    "__pycache__",
    ".pytest_cache",
    "build",
    "dist",
]

[tool.ruff.lint]
select = [
    "F",     # Pyflakes
    "E",     # pycodestyle errors
    "W",     # pycodestyle warnings
    "C90",   # mccabe
    "I",     # isort
    "N",     # pep8-naming
    "UP",    # pyupgrade
    "YTT",   # flake8-2020
    "ASYNC", # flake8-async
    "S",     # flake8-bandit
    "BLE",   # flake8-blind-except
    "FBT",   # flake8-boolean-trap
    "B",     # flake8-bugbear
    "A",     # flake8-builtins
    "COM",   # flake8-commas
    "C4",    # flake8-comprehensions
    "DTZ",   # flake8-datetimez
    "T10",   # flake8-debugger
    "EM",    # flake8-errmsg
    "EXE",   # flake8-executable
    "FA",    # flake8-future-annotations
    "ISC",   # flake8-implicit-str-concat
    "ICN",   # flake8-import-conventions
    "G",     # flake8-logging-format
    "INP",   # flake8-no-pep420
    "PIE",   # flake8-pie
    "T20",   # flake8-print
    "PYI",   # flake8-pyi
    "PT",    # flake8-pytest-style
    "Q",     # flake8-quotes
    "RSE",   # flake8-raise
    "RET",   # flake8-return
    "SLF",   # flake8-self
    "SLOT",  # flake8-slots
    "SIM",   # flake8-simplify
    "TID",   # flake8-tidy-imports
    "TC",    # flake8-type-checking
    "INT",   # flake8-gettext
    "PTH",   # flake8-use-pathlib
    "ERA",   # eradicate
    "PGH",   # pygrep-hooks
    "PL",    # Pylint
    "TRY",   # tryceratops
    "FLY",   # flynt
    "PERF",  # Perflint
    "RUF",   # Ruff-specific rules
]
ignore = [
    "S101",   # Use of assert detected
    "RUF012", # Mutable class attributes should be annotated with `typing.ClassVar`
    "SIM102", # Use a single if-statement
    "COM812", # Missing trailing comma
    "ISC001", # Implicitly concatenated string literals
    "T201",   # print found (useful for debugging in development)
]

[tool.ruff.lint.isort]
force-single-line = true
known-first-party = ["models", "main"]

[tool.ruff.lint.mccabe]
max-complexity = 10

[tool.ruff.lint.per-file-ignores]
"tests/*" = ["S101", "PLR0913", "PLR2004", "ARG001"]